image: rocker/tidyverse:latest

variables:
  GIT_DEPTH: 10
  R_LIBS: ci/lib

cache:
  key: global-cache
  paths:
    - ${R_LIBS}

before_script:
  - apt-get update -q
  - apt-get install -y libsodium-dev

stages:
  - test
  - coverage
  - document
  - pkgdown
  - pkgdown-move
  - deploy

R-CMD-CHECK:
  stage: test
  image: rocker/tidyverse:$VERSION
  parallel:
    matrix:
      - VERSION:
        - latest 
        - devel

  script:
    - apt-get update -qq && apt-get install -y libharfbuzz-dev libfribidi-dev libxt6
    - apt-get install -y qpdf libcctz-dev
    - echo "Library path for packages :" $R_LIBS
    - mkdir -p $R_LIBS
    - Rscript -e 'install.packages("remotes")'
    - Rscript -e 'remotes::install_local(dependencies = TRUE, upgrade = "always", force = TRUE, INSTALL_opts = "--install-tests")'
    - Rscript -e 'devtools::document()'
    - R -e 'devtools::check(manual = FALSE, cran = TRUE, remote = TRUE, incoming = TRUE, force_suggests = FALSE, error_on = "warning")'
    - chmod -R 555 $R_LIBS
    - sudo -Eu rstudio R -e 'library(testthat); library(mpathsenser); test_check("mpathsenser", reporter = c("fail", "summary"), path = "tests")'

# To produce a code coverage report as a GitLab page see
# https://about.gitlab.com/2016/11/03/publish-code-coverage-report-with-gitlab-pages/
# To have the coverage percentage appear as a gitlab badge follow these
# instructions:
# https://docs.gitlab.com/ee/user/project/pipelines/settings.html#test-coverage-parsing
# The coverage parsing string is
# Coverage: \d+\.\d+
coverage:
  stage: coverage
  coverage: '/Coverage: \d+.\d+\%/'
  allow_failure: true
  when: on_success
  only:
    - master
  script:
    - Rscript -e 'remotes::install_local(dependencies = TRUE, upgrade = "never", force = TRUE)'
    - Rscript -e 'remotes::install_cran(c("covr", "DT"), upgrade = "never")'
    - Rscript -e 'covr::gitlab(quiet = FALSE)'
  artifacts:
    paths:
      - public
    expire_in: 30 days

commit-man:
  stage: document
  script:
    - echo "Committing man files to git"
    - apt-get update -qq && apt-get install -y libxt6
    - Rscript -e 'devtools::document()'
    - git add NAMESPACE man
    - |-
      # Check if we have modifications to commit
      CHANGES=$(git status --porcelain man NAMESPACE | wc -l)

      if [ "$CHANGES" -gt "0" ]; then
        # Show the status of files that are about to be created, updated or deleted
        git status

        # Commit all changes      
        git commit -m "Updated manual files"

        ## Push back to Gitlab using secret token created earlier with "skip-ci" option to stop builds triggering in a loop
        git push "https://${GITLAB_USER_LOGIN}:${CI_ACCESS_TOKEN}@${CI_REPOSITORY_URL#*@}" "HEAD:${CI_COMMIT_REF_NAME}" -o ci.skip
      fi

build-site:
  stage: pkgdown
  allow_failure: true
  when: on_success
  only:
    - master
  script:
    - Rscript -e 'remotes::install_cran(c("pkgdown"), upgrade = "never")'
    - Rscript -e 'remotes::install_github("tidyverse/tidytemplate")'
    - Rscript -e 'pkgdown::build_site()'
  artifacts:
    paths:
      - docs
    expire_in: 30 days

move-site-master:
  stage: pkgdown-move
  dependencies:
    - build-site
  only:
    - master
  script:
    - mkdir -p public
    - apt-get install -y curl
    - 'curl --location --output artifacts.zip --header "JOB-TOKEN: $CI_JOB_TOKEN" "https://gitlab.kuleuven.be/api/v4/projects/$CI_PROJECT_ID/jobs/artifacts/production/download?job=pages" &&
      unzip artifacts.zip &&
      rm artifacts.zip &&
      echo "copied production artifacts" ||
      echo "copied production artifacts failed"'
    - cp -r docs/* public
  artifacts:
    paths:
      - public
    expire_in: 30 days

pages:
  stage: deploy
  script:
    - echo "deployment with cache"
  artifacts:
    paths:
      - public
  only:
    - master